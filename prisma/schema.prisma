// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // Use environment variable to store the connection URL
}

generator client {
  provider = "prisma-client-js"
}

model Person {
  id          Int       @id @default(autoincrement()) // Int as PK
  uuid        String    @unique @default(uuid()) // UUID as a unique field
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String?   @unique
  dateOfBirth DateTime?
  address     String?
  gender      String?
  nationality String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        TrtUser?
  Project     Project[]
}

model TrtUser {
  id           Int      @id @default(autoincrement()) // Int as PK
  uuid         String   @unique @default(uuid()) // UUID as a unique field
  username     String   @unique
  email        String   @unique
  passwordHash String
  roleId       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  person       Person   @relation(fields: [personUuid], references: [uuid])
  personUuid   String   @unique //fk to person uuid
  Role         Role?    @relation(fields: [roleUuid], references: [uuid])
  roleUuid     String?
}

model Role {
  id          Int          @id @default(autoincrement()) // Int as PK
  uuid        String       @unique @default(uuid()) // UUID as a unique field
  name        String       @unique
  description String?
  users       TrtUser[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Project {
  id          Int       @id @default(autoincrement()) // Int as PK
  uuid        String    @unique @default(uuid()) // UUID as a unique field
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String
  personId    Int
  person      Person    @relation(fields: [personId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Permission {
  id          Int      @id @default(autoincrement()) // Int as PK
  uuid        String   @unique @default(uuid()) // UUID as a unique field
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//inventory models

model Supplier {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid()) // UUID as a unique field
  supplies   Supply[]
  personUuid String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Supply {
  id                  Int              @id @default(autoincrement())
  uuid                String           @unique @default(uuid()) // UUID as a unique field
  productUuid         String
  product             Product          @relation(fields: [productUuid], references: [uuid])
  supplierUuid        String
  supplier            Supplier         @relation(fields: [supplierUuid], references: [uuid])
  quantity            Decimal
  receivedAt          DateTime         @default(now())
  userUuid            String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  ProductPackUnit     ProductPackUnit? @relation(fields: [productPackUnitUuid], references: [uuid])
  productPackUnitUuid String?
}

model Product {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid()) // UUID as a unique field
  name          String
  description   String?
  basicUnitUuid String
  sellingPrice  Float   @default(1)
  supplies      Supply[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Sale          Sale[]
  categoryUuid  String // Foreign key for the category
  Category      Category      @relation(fields: [categoryUuid], references: [uuid]) // Enforce relationship
  PackagingUnit PackagingUnit @relation(fields: [basicUnitUuid], references: [uuid])
}

model Category {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) // UUID as a unique field
  name        String
  description String?
  Products    Product[] // One-to-many relationship with Product
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PackagingUnit {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid()) // UUID as a unique field
  name      String
  countable Boolean
  Products  Product[] // One-to-many relationship with Product
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductPackUnit {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid()) // UUID as a unique field
  productUuid  String
  unitFactor   Decimal
  packUnitUuid String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Supplies     Supply[]
}

///sales modesls
model Sale {
  id                  Int      @id @default(autoincrement())
  uuid                String   @unique @default(uuid()) // UUID as a unique field
  productUuid         String
  product             Product  @relation(fields: [productUuid], references: [uuid])
  quantity            Decimal
  price               Decimal
  userUuid            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  productPackUnitUuid String?
}

model basketSale {
  id                  Int      @id @default(autoincrement())
  uuid                String   @unique @default(uuid()) // UUID as a unique field
  productUuid         String
  quantity            Decimal
  price               Float
  userUuid            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  productPackUnitUuid String?
}
